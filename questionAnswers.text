1 no, if it can not move foward it will turn one half cardinal direction to the right
2 foward
3 turn a half of a degree to the right
4 a flower
5 if it is facing an edge it turns, otherwise it moves
6 it turns
7 no
8 each turn it decays until it turns almost black
9 no, it just blocks things
10 a bug and a flower can share a space, a rock can not share

1   0  - North
	45 - North East
	90 - East
	135- South East
	180- South
	225- South West
	270- West
	315- North West
	360- North

2 you can move it to any location on the grid, moving it outside leads to errors

3 setColor

4 it disapeared

set 2 -----------------------------------------------------------------------

1 the variable sidelength determins how many steps an unopstructed bug takes before it turns.

2 the variable steps keeps track of the bugs progress along a side

3 turn goes by 45 degrees so a 90 degrees turn is needed

4 boxbug extends bug so it gains all of bug's methods, move being one of those

5 no, it never changes, in the code it is constant and there is no getters or setters

6 yes if it encounters another actor

7 when it turns

------------------------------exersizes

5 I would initilize a new box bug variable, maybe set its color then add it to the world. ie:

		BoxBug bot = new BoxBug(6);
        bot.setColor(Color.ORANGE);
        world.add(bot);

set 3------------------------------------------------------------------------
 1 loc1.getRow();
 2 false;
 3 loc3 == (4,4);
 4 135
 5 it gets passed the direction of the location
set 4------------------------------------------------------------------------
 1 for loop through all locations in grid and check for contents
 2 isValid(10, 10)
 3 in the documentation
 4 no, it's not as flexable
 set 5-----------------------------------------------------------------------
 1 color, location, direction
 2 north, blue
 3  so that the program could run through an array list (singular) rather than several array lists.
 4 no, an error ocurs
 5 setdirection(direction + 90);
set 6-----------------------------------------------------------------------
1 if (getGrid == false){ return}
2 return (neighbor == null || neighbor instanceof Flower);
3 getGrid() to know what grid it works with isValid() check if a location is valid and .get() to check actors
4 .getAdjacentLocation find whats ahead of you
5 getLocation - know where the actor is
6 the bug turns
7 no Loc is used for the location of the flower
8 When the flower is droped it is set to have the same color as the bug
9 yes
10 Flower flower = new Flower(getColor());
flower.putSelfInGrid(gr, loc);
11 4
 ---------------------------------------------------------------------------
 Group Activity Nick P and Josh S
 1 a we'll have it turn if its a rock and jump if its a flower
   b we'll have it turn
   c we'll have it turn
   d we'll have it turn
   e they  will turn
   f how far it jumps before it turns if unobstructed
 2 a bug
   b bug, in the sense it is a bug
   c yes, number of jumps
   d Act()
   e Jump() - check landing spot and jump if safe turn if not
   f building a JumperRunner, and forcing the bug into all situations possible and ensuring it works
   test:
   	  -jump in difrent directions
   	  -jump over something
      -jump into a rock
      -jump into a flower
      -jump off grid
      -jump at edge of grid
      -jump into another actor
      -jump into another jumper
      -not leaving flowers when it moves
set 7-----------------------------------------------------------------------
1 getActors() processActors() getMoveLocation() selectMoveLocation() makeMove()
2 they check for other actors and process them in some way
3 only if they need a difrent set of actors than the 8 spaces around them
4 remove them from the grid, move them, change their color, change its own color
5 getMoveLocation() all valid locations selectMoveLocation() choose from available locations makeMove() move to choosen location
6 it extends actor and actor has constructors in it
set 8-----------------------------------------------------------------------
1 it overides functions that act calls
2 because it uses that method when it moves, and adds to it
3 add a new flower in its old location after it makes a move in the function makeMove
4 it does not need to change the method, it uses the exact same code
5 actor
6 It calls a getGrid function
set 9 ----------------------------------------------------------------------
1 it uses the method as it is in the critter class so it does not need to overide it
2 it gets the three tiles in front of it and for all three of them it checks if they are empty, a rock or another criter, if all of those return false in a tile it removes the actor there 
3 so that it gets the three tiles infront of it
4 (2,5), (3,5), (4,5)
5 a crabcritter moves left or right and if it can't it turns 90 degrees
6 if both tiles next to it are filled
7 because crabs are critters, and the process actors function in critter ignores critters




